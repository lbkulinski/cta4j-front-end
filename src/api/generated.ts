/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import { customInstance } from './custom-instance';
/**
 * Represents a direction for a route (e.g., Northbound or Southbound).
 */
export type GetDirections200Item = typeof GetDirections200Item[keyof typeof GetDirections200Item];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDirections200Item = {
  NORTHBOUND: 'NORTHBOUND',
  SOUTHBOUND: 'SOUTHBOUND',
  EASTBOUND: 'EASTBOUND',
  WESTBOUND: 'WESTBOUND',
} as const;

/**
 * Represents a stop on a route.
 */
export interface Stop {
  /** The unique identifier of the stop. */
  id: number;
  /** The name of the stop. */
  name: string;
}

/**
 * Represents the type of stop event, indicating whether the vehicle is arriving at or departing from a stop.
 */
export type BusType = typeof BusType[keyof typeof BusType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BusType = {
  ARRIVAL: 'ARRIVAL',
  DEPARTURE: 'DEPARTURE',
} as const;

/**
 * Represents a bus and its schedule information.
 */
export interface Bus {
  /** The estimated arrival or departure time of the bus at the stop. */
  arrivalTime: string;
  /** Indicates whether the bus is delayed. */
  delayed: boolean;
  /** The final destination of the bus. */
  destination: string;
  /** The unique identifier of the bus. */
  id: number;
  /** The time when the arrival or departure prediction was made. */
  predictionTime: string;
  /** The route on which the bus is operating. */
  route: string;
  /** The stop where the bus will next arrive or depart. */
  stop: string;
  /** Represents the type of stop event, indicating whether the vehicle is arriving at or departing from a stop. */
  type: BusType;
}

/**
 * Represents a bus route and its details.
 */
export interface Route {
  /** The unique identifier of the route. */
  id: string;
  /** The name of the route. */
  name: string;
}

/**
 * Represents a train station and its details.
 */
export interface Station {
  /** The unique identifier of the station. */
  id: number;
  /** The name of the station. */
  name: string;
}

/**
 * Represents the different transit lines in the system.
 */
export type TrainLine = typeof TrainLine[keyof typeof TrainLine];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrainLine = {
  RED: 'RED',
  BLUE: 'BLUE',
  BROWN: 'BROWN',
  GREEN: 'GREEN',
  ORANGE: 'ORANGE',
  PURPLE: 'PURPLE',
  PINK: 'PINK',
  YELLOW: 'YELLOW',
  N_A: 'N_A',
} as const;

/**
 * Represents a train and its schedule information.
 */
export interface Train {
  /** The estimated arrival time of the train at the station. */
  arrivalTime: string;
  /** Indicates whether the train is delayed. */
  delayed: boolean;
  /** The final destination of the train. */
  destination: string;
  /** Indicates whether the train is due to arrive soon. */
  due: boolean;
  /** Represents the different transit lines in the system. */
  line: TrainLine;
  /** The time when the arrival prediction was made. */
  predictionTime: string;
  /** The unique run number of the train. */
  run: number;
  /** Indicates whether the train is arriving according to its schedule. */
  scheduled: boolean;
  /** The station where the train will next arrive. */
  station: string;
}





/**
 * Retrieves a list of upcoming stations for a specific train, identified by its run number.
 * @summary Retrieve upcoming stations for a train run.
 */
export const getUpcomingStations = (
    run: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Train[]>(
      {url: `/api/trains/${run}/stations`, method: 'GET', signal
    },
      );
    }
  

export const getGetUpcomingStationsQueryKey = (run: number,) => {
    return [`/api/trains/${run}/stations`] as const;
    }

    
export const getGetUpcomingStationsQueryOptions = <TData = Awaited<ReturnType<typeof getUpcomingStations>>, TError = void>(run: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUpcomingStationsQueryKey(run);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUpcomingStations>>> = ({ signal }) => getUpcomingStations(run, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(run), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUpcomingStationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUpcomingStations>>>
export type GetUpcomingStationsQueryError = void


export function useGetUpcomingStations<TData = Awaited<ReturnType<typeof getUpcomingStations>>, TError = void>(
 run: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUpcomingStations>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUpcomingStations<TData = Awaited<ReturnType<typeof getUpcomingStations>>, TError = void>(
 run: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUpcomingStations>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUpcomingStations<TData = Awaited<ReturnType<typeof getUpcomingStations>>, TError = void>(
 run: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve upcoming stations for a train run.
 */

export function useGetUpcomingStations<TData = Awaited<ReturnType<typeof getUpcomingStations>>, TError = void>(
 run: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUpcomingStationsQueryOptions(run,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves the list of all available train stations in the system.
 * @summary Retrieve the list of train stations.
 */
export const getStations = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Station[]>(
      {url: `/api/stations`, method: 'GET', signal
    },
      );
    }
  

export const getGetStationsQueryKey = () => {
    return [`/api/stations`] as const;
    }

    
export const getGetStationsQueryOptions = <TData = Awaited<ReturnType<typeof getStations>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStations>>> = ({ signal }) => getStations(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStationsQueryResult = NonNullable<Awaited<ReturnType<typeof getStations>>>
export type GetStationsQueryError = void


export function useGetStations<TData = Awaited<ReturnType<typeof getStations>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStations>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStations<TData = Awaited<ReturnType<typeof getStations>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStations>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStations<TData = Awaited<ReturnType<typeof getStations>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve the list of train stations.
 */

export function useGetStations<TData = Awaited<ReturnType<typeof getStations>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStationsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves a list of upcoming train arrivals for a specific station, identified by the station ID.
 * @summary Retrieve upcoming train arrivals for a station.
 */
export const getArrivals = (
    stationId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Train[]>(
      {url: `/api/stations/${stationId}/arrivals`, method: 'GET', signal
    },
      );
    }
  

export const getGetArrivalsQueryKey = (stationId: number,) => {
    return [`/api/stations/${stationId}/arrivals`] as const;
    }

    
export const getGetArrivalsQueryOptions = <TData = Awaited<ReturnType<typeof getArrivals>>, TError = void>(stationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetArrivalsQueryKey(stationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArrivals>>> = ({ signal }) => getArrivals(stationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(stationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getArrivals>>, TError, TData> & { queryKey: QueryKey }
}

export type GetArrivalsQueryResult = NonNullable<Awaited<ReturnType<typeof getArrivals>>>
export type GetArrivalsQueryError = void


export function useGetArrivals<TData = Awaited<ReturnType<typeof getArrivals>>, TError = void>(
 stationId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArrivals>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetArrivals<TData = Awaited<ReturnType<typeof getArrivals>>, TError = void>(
 stationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArrivals>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetArrivals<TData = Awaited<ReturnType<typeof getArrivals>>, TError = void>(
 stationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve upcoming train arrivals for a station.
 */

export function useGetArrivals<TData = Awaited<ReturnType<typeof getArrivals>>, TError = void>(
 stationId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetArrivalsQueryOptions(stationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves the list of all available routes in the system.
 * @summary Retrieve the list of routes.
 */
export const getRoutes = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Route[]>(
      {url: `/api/routes`, method: 'GET', signal
    },
      );
    }
  

export const getGetRoutesQueryKey = () => {
    return [`/api/routes`] as const;
    }

    
export const getGetRoutesQueryOptions = <TData = Awaited<ReturnType<typeof getRoutes>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoutes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoutesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoutes>>> = ({ signal }) => getRoutes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoutes>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRoutesQueryResult = NonNullable<Awaited<ReturnType<typeof getRoutes>>>
export type GetRoutesQueryError = void


export function useGetRoutes<TData = Awaited<ReturnType<typeof getRoutes>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoutes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoutes>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetRoutes<TData = Awaited<ReturnType<typeof getRoutes>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoutes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoutes>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetRoutes<TData = Awaited<ReturnType<typeof getRoutes>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoutes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve the list of routes.
 */

export function useGetRoutes<TData = Awaited<ReturnType<typeof getRoutes>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoutes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRoutesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves a list of upcoming bus arrivals for a specific stop on a route, identified by the route ID and stop ID.
 * @summary Retrieve upcoming bus arrivals for a stop on a route.
 */
export const getArrivals1 = (
    routeId: string,
    stopId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Bus[]>(
      {url: `/api/routes/${routeId}/stops/${stopId}/arrivals`, method: 'GET', signal
    },
      );
    }
  

export const getGetArrivals1QueryKey = (routeId: string,
    stopId: number,) => {
    return [`/api/routes/${routeId}/stops/${stopId}/arrivals`] as const;
    }

    
export const getGetArrivals1QueryOptions = <TData = Awaited<ReturnType<typeof getArrivals1>>, TError = void>(routeId: string,
    stopId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals1>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetArrivals1QueryKey(routeId,stopId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArrivals1>>> = ({ signal }) => getArrivals1(routeId,stopId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(routeId && stopId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getArrivals1>>, TError, TData> & { queryKey: QueryKey }
}

export type GetArrivals1QueryResult = NonNullable<Awaited<ReturnType<typeof getArrivals1>>>
export type GetArrivals1QueryError = void


export function useGetArrivals1<TData = Awaited<ReturnType<typeof getArrivals1>>, TError = void>(
 routeId: string,
    stopId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals1>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArrivals1>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetArrivals1<TData = Awaited<ReturnType<typeof getArrivals1>>, TError = void>(
 routeId: string,
    stopId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals1>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArrivals1>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetArrivals1<TData = Awaited<ReturnType<typeof getArrivals1>>, TError = void>(
 routeId: string,
    stopId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals1>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve upcoming bus arrivals for a stop on a route.
 */

export function useGetArrivals1<TData = Awaited<ReturnType<typeof getArrivals1>>, TError = void>(
 routeId: string,
    stopId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArrivals1>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetArrivals1QueryOptions(routeId,stopId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves a list of directions (e.g., Northbound or Southbound) for a specific route, identified by the route ID.
 * @summary  Retrieve directions for a route.
 */
export const getDirections = (
    routeId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetDirections200Item[]>(
      {url: `/api/routes/${routeId}/directions`, method: 'GET', signal
    },
      );
    }
  

export const getGetDirectionsQueryKey = (routeId: string,) => {
    return [`/api/routes/${routeId}/directions`] as const;
    }

    
export const getGetDirectionsQueryOptions = <TData = Awaited<ReturnType<typeof getDirections>>, TError = void>(routeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDirections>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDirectionsQueryKey(routeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDirections>>> = ({ signal }) => getDirections(routeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(routeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDirections>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDirectionsQueryResult = NonNullable<Awaited<ReturnType<typeof getDirections>>>
export type GetDirectionsQueryError = void


export function useGetDirections<TData = Awaited<ReturnType<typeof getDirections>>, TError = void>(
 routeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDirections>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDirections>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetDirections<TData = Awaited<ReturnType<typeof getDirections>>, TError = void>(
 routeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDirections>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDirections>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetDirections<TData = Awaited<ReturnType<typeof getDirections>>, TError = void>(
 routeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDirections>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary  Retrieve directions for a route.
 */

export function useGetDirections<TData = Awaited<ReturnType<typeof getDirections>>, TError = void>(
 routeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDirections>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDirectionsQueryOptions(routeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves a list of stops for a specific route and direction, identified by the route ID and direction.
 * @summary Retrieve stops for a route and direction.
 */
export const getStops = (
    routeId: string,
    direction: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Stop[]>(
      {url: `/api/routes/${routeId}/directions/${direction}/stops`, method: 'GET', signal
    },
      );
    }
  

export const getGetStopsQueryKey = (routeId: string,
    direction: string,) => {
    return [`/api/routes/${routeId}/directions/${direction}/stops`] as const;
    }

    
export const getGetStopsQueryOptions = <TData = Awaited<ReturnType<typeof getStops>>, TError = void>(routeId: string,
    direction: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStops>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStopsQueryKey(routeId,direction);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStops>>> = ({ signal }) => getStops(routeId,direction, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(routeId && direction), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStops>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStopsQueryResult = NonNullable<Awaited<ReturnType<typeof getStops>>>
export type GetStopsQueryError = void


export function useGetStops<TData = Awaited<ReturnType<typeof getStops>>, TError = void>(
 routeId: string,
    direction: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStops>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStops>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStops<TData = Awaited<ReturnType<typeof getStops>>, TError = void>(
 routeId: string,
    direction: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStops>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStops>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStops<TData = Awaited<ReturnType<typeof getStops>>, TError = void>(
 routeId: string,
    direction: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStops>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve stops for a route and direction.
 */

export function useGetStops<TData = Awaited<ReturnType<typeof getStops>>, TError = void>(
 routeId: string,
    direction: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStops>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStopsQueryOptions(routeId,direction,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves a list of upcoming stops for a specific bus, identified by its ID.
 * @summary Retrieve upcoming stops for a bus.
 */
export const getUpcomingStops = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Bus[]>(
      {url: `/api/buses/${id}/stops`, method: 'GET', signal
    },
      );
    }
  

export const getGetUpcomingStopsQueryKey = (id: number,) => {
    return [`/api/buses/${id}/stops`] as const;
    }

    
export const getGetUpcomingStopsQueryOptions = <TData = Awaited<ReturnType<typeof getUpcomingStops>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStops>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUpcomingStopsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUpcomingStops>>> = ({ signal }) => getUpcomingStops(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStops>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUpcomingStopsQueryResult = NonNullable<Awaited<ReturnType<typeof getUpcomingStops>>>
export type GetUpcomingStopsQueryError = void


export function useGetUpcomingStops<TData = Awaited<ReturnType<typeof getUpcomingStops>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStops>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUpcomingStops>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUpcomingStops<TData = Awaited<ReturnType<typeof getUpcomingStops>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStops>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUpcomingStops>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetUpcomingStops<TData = Awaited<ReturnType<typeof getUpcomingStops>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStops>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve upcoming stops for a bus.
 */

export function useGetUpcomingStops<TData = Awaited<ReturnType<typeof getUpcomingStops>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUpcomingStops>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUpcomingStopsQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




