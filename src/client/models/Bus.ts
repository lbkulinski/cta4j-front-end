/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.ts';
/**
 * Represents a bus and its schedule information.
 * @export
 * @interface Bus
 */
export interface Bus {
    /**
     * The unique identifier of the bus.
     * @type {number}
     * @memberof Bus
     */
    id: number;
    /**
     * Represents the type of stop event, indicating whether the vehicle is arriving at or departing from a stop.
     * @type {string}
     * @memberof Bus
     */
    type: BusTypeEnum;
    /**
     * The stop where the bus will next arrive or depart.
     * @type {string}
     * @memberof Bus
     */
    stop: string;
    /**
     * The route on which the bus is operating.
     * @type {string}
     * @memberof Bus
     */
    route: string;
    /**
     * The final destination of the bus.
     * @type {string}
     * @memberof Bus
     */
    destination: string;
    /**
     * The time when the arrival or departure prediction was made.
     * @type {Date}
     * @memberof Bus
     */
    predictionTime: Date;
    /**
     * The estimated arrival or departure time of the bus at the stop.
     * @type {Date}
     * @memberof Bus
     */
    arrivalTime: Date;
    /**
     * Indicates whether the bus is delayed.
     * @type {boolean}
     * @memberof Bus
     */
    delayed: boolean;
}


/**
 * @export
 */
export const BusTypeEnum = {
    Arrival: 'ARRIVAL',
    Departure: 'DEPARTURE'
} as const;
export type BusTypeEnum = typeof BusTypeEnum[keyof typeof BusTypeEnum];


/**
 * Check if a given object implements the Bus interface.
 */
export function instanceOfBus(value: object): value is Bus {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('stop' in value) || value['stop'] === undefined) return false;
    if (!('route' in value) || value['route'] === undefined) return false;
    if (!('destination' in value) || value['destination'] === undefined) return false;
    if (!('predictionTime' in value) || value['predictionTime'] === undefined) return false;
    if (!('arrivalTime' in value) || value['arrivalTime'] === undefined) return false;
    if (!('delayed' in value) || value['delayed'] === undefined) return false;
    return true;
}

export function BusFromJSON(json: any): Bus {
    return BusFromJSONTyped(json, false);
}

export function BusFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bus {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'stop': json['stop'],
        'route': json['route'],
        'destination': json['destination'],
        'predictionTime': (new Date(json['predictionTime'])),
        'arrivalTime': (new Date(json['arrivalTime'])),
        'delayed': json['delayed'],
    };
}

  export function BusToJSON(json: any): Bus {
      return BusToJSONTyped(json, false);
  }

  export function BusToJSONTyped(value?: Bus | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'stop': value['stop'],
        'route': value['route'],
        'destination': value['destination'],
        'predictionTime': ((value['predictionTime']).toISOString()),
        'arrivalTime': ((value['arrivalTime']).toISOString()),
        'delayed': value['delayed'],
    };
}

