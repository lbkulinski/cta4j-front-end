/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  Bus,
  Route,
  Stop,
} from '../models';
import {
    BusFromJSON,
    BusToJSON,
    RouteFromJSON,
    RouteToJSON,
    StopFromJSON,
    StopToJSON,
} from '../models';

export interface GetArrivals1Request {
    routeId: string;
    stopId: number;
}

export interface GetDirectionsRequest {
    routeId: string;
}

export interface GetStopsRequest {
    routeId: string;
    direction: string;
}

/**
 * 
 */
export class RoutesApi extends runtime.BaseAPI {

    /**
     * Retrieves a list of upcoming bus arrivals for a specific stop on a route, identified by the route ID and stop ID.
     * Retrieve upcoming bus arrivals for a stop on a route.
     */
    async getArrivals1Raw(requestParameters: GetArrivals1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Bus>>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling getArrivals1().'
            );
        }

        if (requestParameters['stopId'] == null) {
            throw new runtime.RequiredError(
                'stopId',
                'Required parameter "stopId" was null or undefined when calling getArrivals1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/routes/{routeId}/stops/{stopId}/arrivals`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))).replace(`{${"stopId"}}`, encodeURIComponent(String(requestParameters['stopId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BusFromJSON));
    }

    /**
     * Retrieves a list of upcoming bus arrivals for a specific stop on a route, identified by the route ID and stop ID.
     * Retrieve upcoming bus arrivals for a stop on a route.
     */
    async getArrivals1(requestParameters: GetArrivals1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Bus>> {
        const response = await this.getArrivals1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of directions (e.g., Northbound or Southbound) for a specific route, identified by the route ID.
     *  Retrieve directions for a route.
     */
    async getDirectionsRaw(requestParameters: GetDirectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling getDirections().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/routes/{routeId}/directions`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves a list of directions (e.g., Northbound or Southbound) for a specific route, identified by the route ID.
     *  Retrieve directions for a route.
     */
    async getDirections(requestParameters: GetDirectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getDirectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the list of all available routes in the system.
     * Retrieve the list of routes.
     */
    async getRoutesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Route>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/routes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RouteFromJSON));
    }

    /**
     * Retrieves the list of all available routes in the system.
     * Retrieve the list of routes.
     */
    async getRoutes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Route>> {
        const response = await this.getRoutesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of stops for a specific route and direction, identified by the route ID and direction.
     * Retrieve stops for a route and direction.
     */
    async getStopsRaw(requestParameters: GetStopsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Stop>>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling getStops().'
            );
        }

        if (requestParameters['direction'] == null) {
            throw new runtime.RequiredError(
                'direction',
                'Required parameter "direction" was null or undefined when calling getStops().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/routes/{routeId}/directions/{direction}/stops`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))).replace(`{${"direction"}}`, encodeURIComponent(String(requestParameters['direction']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StopFromJSON));
    }

    /**
     * Retrieves a list of stops for a specific route and direction, identified by the route ID and direction.
     * Retrieve stops for a route and direction.
     */
    async getStops(requestParameters: GetStopsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Stop>> {
        const response = await this.getStopsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
